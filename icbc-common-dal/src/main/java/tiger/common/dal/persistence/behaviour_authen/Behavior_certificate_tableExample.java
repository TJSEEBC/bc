package tiger.common.dal.persistence.behaviour_authen;

import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;
import java.util.List;

public class Behavior_certificate_tableExample {
    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table behavior_certificate_table
     *
     * @mbggenerated
     */
    protected String orderByClause;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table behavior_certificate_table
     *
     * @mbggenerated
     */
    protected boolean distinct;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table behavior_certificate_table
     *
     * @mbggenerated
     */
    protected List<Criteria> oredCriteria;

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table behavior_certificate_table
     *
     * @mbggenerated
     */
    public Behavior_certificate_tableExample() {
        oredCriteria = new ArrayList<Criteria>();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table behavior_certificate_table
     *
     * @mbggenerated
     */
    public void setOrderByClause(String orderByClause) {
        this.orderByClause = orderByClause;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table behavior_certificate_table
     *
     * @mbggenerated
     */
    public String getOrderByClause() {
        return orderByClause;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table behavior_certificate_table
     *
     * @mbggenerated
     */
    public void setDistinct(boolean distinct) {
        this.distinct = distinct;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table behavior_certificate_table
     *
     * @mbggenerated
     */
    public boolean isDistinct() {
        return distinct;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table behavior_certificate_table
     *
     * @mbggenerated
     */
    public List<Criteria> getOredCriteria() {
        return oredCriteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table behavior_certificate_table
     *
     * @mbggenerated
     */
    public void or(Criteria criteria) {
        oredCriteria.add(criteria);
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table behavior_certificate_table
     *
     * @mbggenerated
     */
    public Criteria or() {
        Criteria criteria = createCriteriaInternal();
        oredCriteria.add(criteria);
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table behavior_certificate_table
     *
     * @mbggenerated
     */
    public Criteria createCriteria() {
        Criteria criteria = createCriteriaInternal();
        if (oredCriteria.size() == 0) {
            oredCriteria.add(criteria);
        }
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table behavior_certificate_table
     *
     * @mbggenerated
     */
    protected Criteria createCriteriaInternal() {
        Criteria criteria = new Criteria();
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table behavior_certificate_table
     *
     * @mbggenerated
     */
    public void clear() {
        oredCriteria.clear();
        orderByClause = null;
        distinct = false;
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table behavior_certificate_table
     *
     * @mbggenerated
     */
    protected abstract static class GeneratedCriteria {
        protected List<Criterion> criteria;

        protected GeneratedCriteria() {
            super();
            criteria = new ArrayList<Criterion>();
        }

        public boolean isValid() {
            return criteria.size() > 0;
        }

        public List<Criterion> getCriteria() {
            return criteria;
        }

        protected void addCriterion(String condition) {
            if (condition == null) {
                throw new RuntimeException("Value for condition cannot be null");
            }
            criteria.add(new Criterion(condition));
        }

        protected void addCriterion(String condition, Object value, String property) {
            if (value == null) {
                throw new RuntimeException("Value for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value));
        }

        protected void addCriterion(String condition, Object value1, Object value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value1, value2));
        }

        protected void addCriterionForJDBCDate(String condition, Date value, String property) {
            if (value == null) {
                throw new RuntimeException("Value for " + property + " cannot be null");
            }
            addCriterion(condition, new java.sql.Date(value.getTime()), property);
        }

        protected void addCriterionForJDBCDate(String condition, List<Date> values, String property) {
            if (values == null || values.size() == 0) {
                throw new RuntimeException("Value list for " + property + " cannot be null or empty");
            }
            List<java.sql.Date> dateList = new ArrayList<java.sql.Date>();
            Iterator<Date> iter = values.iterator();
            while (iter.hasNext()) {
                dateList.add(new java.sql.Date(iter.next().getTime()));
            }
            addCriterion(condition, dateList, property);
        }

        protected void addCriterionForJDBCDate(String condition, Date value1, Date value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            addCriterion(condition, new java.sql.Date(value1.getTime()), new java.sql.Date(value2.getTime()), property);
        }

        public Criteria andUserIsNull() {
            addCriterion("user is null");
            return (Criteria) this;
        }

        public Criteria andUserIsNotNull() {
            addCriterion("user is not null");
            return (Criteria) this;
        }

        public Criteria andUserEqualTo(Integer value) {
            addCriterion("user =", value, "user");
            return (Criteria) this;
        }

        public Criteria andUserNotEqualTo(Integer value) {
            addCriterion("user <>", value, "user");
            return (Criteria) this;
        }

        public Criteria andUserGreaterThan(Integer value) {
            addCriterion("user >", value, "user");
            return (Criteria) this;
        }

        public Criteria andUserGreaterThanOrEqualTo(Integer value) {
            addCriterion("user >=", value, "user");
            return (Criteria) this;
        }

        public Criteria andUserLessThan(Integer value) {
            addCriterion("user <", value, "user");
            return (Criteria) this;
        }

        public Criteria andUserLessThanOrEqualTo(Integer value) {
            addCriterion("user <=", value, "user");
            return (Criteria) this;
        }

        public Criteria andUserIn(List<Integer> values) {
            addCriterion("user in", values, "user");
            return (Criteria) this;
        }

        public Criteria andUserNotIn(List<Integer> values) {
            addCriterion("user not in", values, "user");
            return (Criteria) this;
        }

        public Criteria andUserBetween(Integer value1, Integer value2) {
            addCriterion("user between", value1, value2, "user");
            return (Criteria) this;
        }

        public Criteria andUserNotBetween(Integer value1, Integer value2) {
            addCriterion("user not between", value1, value2, "user");
            return (Criteria) this;
        }

        public Criteria andWeekdayIsNull() {
            addCriterion("weekday is null");
            return (Criteria) this;
        }

        public Criteria andWeekdayIsNotNull() {
            addCriterion("weekday is not null");
            return (Criteria) this;
        }

        public Criteria andWeekdayEqualTo(Float value) {
            addCriterion("weekday =", value, "weekday");
            return (Criteria) this;
        }

        public Criteria andWeekdayNotEqualTo(Float value) {
            addCriterion("weekday <>", value, "weekday");
            return (Criteria) this;
        }

        public Criteria andWeekdayGreaterThan(Float value) {
            addCriterion("weekday >", value, "weekday");
            return (Criteria) this;
        }

        public Criteria andWeekdayGreaterThanOrEqualTo(Float value) {
            addCriterion("weekday >=", value, "weekday");
            return (Criteria) this;
        }

        public Criteria andWeekdayLessThan(Float value) {
            addCriterion("weekday <", value, "weekday");
            return (Criteria) this;
        }

        public Criteria andWeekdayLessThanOrEqualTo(Float value) {
            addCriterion("weekday <=", value, "weekday");
            return (Criteria) this;
        }

        public Criteria andWeekdayIn(List<Float> values) {
            addCriterion("weekday in", values, "weekday");
            return (Criteria) this;
        }

        public Criteria andWeekdayNotIn(List<Float> values) {
            addCriterion("weekday not in", values, "weekday");
            return (Criteria) this;
        }

        public Criteria andWeekdayBetween(Float value1, Float value2) {
            addCriterion("weekday between", value1, value2, "weekday");
            return (Criteria) this;
        }

        public Criteria andWeekdayNotBetween(Float value1, Float value2) {
            addCriterion("weekday not between", value1, value2, "weekday");
            return (Criteria) this;
        }

        public Criteria andWeekendIsNull() {
            addCriterion("weekend is null");
            return (Criteria) this;
        }

        public Criteria andWeekendIsNotNull() {
            addCriterion("weekend is not null");
            return (Criteria) this;
        }

        public Criteria andWeekendEqualTo(Float value) {
            addCriterion("weekend =", value, "weekend");
            return (Criteria) this;
        }

        public Criteria andWeekendNotEqualTo(Float value) {
            addCriterion("weekend <>", value, "weekend");
            return (Criteria) this;
        }

        public Criteria andWeekendGreaterThan(Float value) {
            addCriterion("weekend >", value, "weekend");
            return (Criteria) this;
        }

        public Criteria andWeekendGreaterThanOrEqualTo(Float value) {
            addCriterion("weekend >=", value, "weekend");
            return (Criteria) this;
        }

        public Criteria andWeekendLessThan(Float value) {
            addCriterion("weekend <", value, "weekend");
            return (Criteria) this;
        }

        public Criteria andWeekendLessThanOrEqualTo(Float value) {
            addCriterion("weekend <=", value, "weekend");
            return (Criteria) this;
        }

        public Criteria andWeekendIn(List<Float> values) {
            addCriterion("weekend in", values, "weekend");
            return (Criteria) this;
        }

        public Criteria andWeekendNotIn(List<Float> values) {
            addCriterion("weekend not in", values, "weekend");
            return (Criteria) this;
        }

        public Criteria andWeekendBetween(Float value1, Float value2) {
            addCriterion("weekend between", value1, value2, "weekend");
            return (Criteria) this;
        }

        public Criteria andWeekendNotBetween(Float value1, Float value2) {
            addCriterion("weekend not between", value1, value2, "weekend");
            return (Criteria) this;
        }

        public Criteria andFestivalIsNull() {
            addCriterion("festival is null");
            return (Criteria) this;
        }

        public Criteria andFestivalIsNotNull() {
            addCriterion("festival is not null");
            return (Criteria) this;
        }

        public Criteria andFestivalEqualTo(Float value) {
            addCriterion("festival =", value, "festival");
            return (Criteria) this;
        }

        public Criteria andFestivalNotEqualTo(Float value) {
            addCriterion("festival <>", value, "festival");
            return (Criteria) this;
        }

        public Criteria andFestivalGreaterThan(Float value) {
            addCriterion("festival >", value, "festival");
            return (Criteria) this;
        }

        public Criteria andFestivalGreaterThanOrEqualTo(Float value) {
            addCriterion("festival >=", value, "festival");
            return (Criteria) this;
        }

        public Criteria andFestivalLessThan(Float value) {
            addCriterion("festival <", value, "festival");
            return (Criteria) this;
        }

        public Criteria andFestivalLessThanOrEqualTo(Float value) {
            addCriterion("festival <=", value, "festival");
            return (Criteria) this;
        }

        public Criteria andFestivalIn(List<Float> values) {
            addCriterion("festival in", values, "festival");
            return (Criteria) this;
        }

        public Criteria andFestivalNotIn(List<Float> values) {
            addCriterion("festival not in", values, "festival");
            return (Criteria) this;
        }

        public Criteria andFestivalBetween(Float value1, Float value2) {
            addCriterion("festival between", value1, value2, "festival");
            return (Criteria) this;
        }

        public Criteria andFestivalNotBetween(Float value1, Float value2) {
            addCriterion("festival not between", value1, value2, "festival");
            return (Criteria) this;
        }

        public Criteria andNormalDayIsNull() {
            addCriterion("normal_day is null");
            return (Criteria) this;
        }

        public Criteria andNormalDayIsNotNull() {
            addCriterion("normal_day is not null");
            return (Criteria) this;
        }

        public Criteria andNormalDayEqualTo(Float value) {
            addCriterion("normal_day =", value, "normalDay");
            return (Criteria) this;
        }

        public Criteria andNormalDayNotEqualTo(Float value) {
            addCriterion("normal_day <>", value, "normalDay");
            return (Criteria) this;
        }

        public Criteria andNormalDayGreaterThan(Float value) {
            addCriterion("normal_day >", value, "normalDay");
            return (Criteria) this;
        }

        public Criteria andNormalDayGreaterThanOrEqualTo(Float value) {
            addCriterion("normal_day >=", value, "normalDay");
            return (Criteria) this;
        }

        public Criteria andNormalDayLessThan(Float value) {
            addCriterion("normal_day <", value, "normalDay");
            return (Criteria) this;
        }

        public Criteria andNormalDayLessThanOrEqualTo(Float value) {
            addCriterion("normal_day <=", value, "normalDay");
            return (Criteria) this;
        }

        public Criteria andNormalDayIn(List<Float> values) {
            addCriterion("normal_day in", values, "normalDay");
            return (Criteria) this;
        }

        public Criteria andNormalDayNotIn(List<Float> values) {
            addCriterion("normal_day not in", values, "normalDay");
            return (Criteria) this;
        }

        public Criteria andNormalDayBetween(Float value1, Float value2) {
            addCriterion("normal_day between", value1, value2, "normalDay");
            return (Criteria) this;
        }

        public Criteria andNormalDayNotBetween(Float value1, Float value2) {
            addCriterion("normal_day not between", value1, value2, "normalDay");
            return (Criteria) this;
        }

        public Criteria andInterval1IsNull() {
            addCriterion("interval_1 is null");
            return (Criteria) this;
        }

        public Criteria andInterval1IsNotNull() {
            addCriterion("interval_1 is not null");
            return (Criteria) this;
        }

        public Criteria andInterval1EqualTo(Float value) {
            addCriterion("interval_1 =", value, "interval1");
            return (Criteria) this;
        }

        public Criteria andInterval1NotEqualTo(Float value) {
            addCriterion("interval_1 <>", value, "interval1");
            return (Criteria) this;
        }

        public Criteria andInterval1GreaterThan(Float value) {
            addCriterion("interval_1 >", value, "interval1");
            return (Criteria) this;
        }

        public Criteria andInterval1GreaterThanOrEqualTo(Float value) {
            addCriterion("interval_1 >=", value, "interval1");
            return (Criteria) this;
        }

        public Criteria andInterval1LessThan(Float value) {
            addCriterion("interval_1 <", value, "interval1");
            return (Criteria) this;
        }

        public Criteria andInterval1LessThanOrEqualTo(Float value) {
            addCriterion("interval_1 <=", value, "interval1");
            return (Criteria) this;
        }

        public Criteria andInterval1In(List<Float> values) {
            addCriterion("interval_1 in", values, "interval1");
            return (Criteria) this;
        }

        public Criteria andInterval1NotIn(List<Float> values) {
            addCriterion("interval_1 not in", values, "interval1");
            return (Criteria) this;
        }

        public Criteria andInterval1Between(Float value1, Float value2) {
            addCriterion("interval_1 between", value1, value2, "interval1");
            return (Criteria) this;
        }

        public Criteria andInterval1NotBetween(Float value1, Float value2) {
            addCriterion("interval_1 not between", value1, value2, "interval1");
            return (Criteria) this;
        }

        public Criteria andInterval2IsNull() {
            addCriterion("interval_2 is null");
            return (Criteria) this;
        }

        public Criteria andInterval2IsNotNull() {
            addCriterion("interval_2 is not null");
            return (Criteria) this;
        }

        public Criteria andInterval2EqualTo(Float value) {
            addCriterion("interval_2 =", value, "interval2");
            return (Criteria) this;
        }

        public Criteria andInterval2NotEqualTo(Float value) {
            addCriterion("interval_2 <>", value, "interval2");
            return (Criteria) this;
        }

        public Criteria andInterval2GreaterThan(Float value) {
            addCriterion("interval_2 >", value, "interval2");
            return (Criteria) this;
        }

        public Criteria andInterval2GreaterThanOrEqualTo(Float value) {
            addCriterion("interval_2 >=", value, "interval2");
            return (Criteria) this;
        }

        public Criteria andInterval2LessThan(Float value) {
            addCriterion("interval_2 <", value, "interval2");
            return (Criteria) this;
        }

        public Criteria andInterval2LessThanOrEqualTo(Float value) {
            addCriterion("interval_2 <=", value, "interval2");
            return (Criteria) this;
        }

        public Criteria andInterval2In(List<Float> values) {
            addCriterion("interval_2 in", values, "interval2");
            return (Criteria) this;
        }

        public Criteria andInterval2NotIn(List<Float> values) {
            addCriterion("interval_2 not in", values, "interval2");
            return (Criteria) this;
        }

        public Criteria andInterval2Between(Float value1, Float value2) {
            addCriterion("interval_2 between", value1, value2, "interval2");
            return (Criteria) this;
        }

        public Criteria andInterval2NotBetween(Float value1, Float value2) {
            addCriterion("interval_2 not between", value1, value2, "interval2");
            return (Criteria) this;
        }

        public Criteria andInterval3IsNull() {
            addCriterion("interval_3 is null");
            return (Criteria) this;
        }

        public Criteria andInterval3IsNotNull() {
            addCriterion("interval_3 is not null");
            return (Criteria) this;
        }

        public Criteria andInterval3EqualTo(Float value) {
            addCriterion("interval_3 =", value, "interval3");
            return (Criteria) this;
        }

        public Criteria andInterval3NotEqualTo(Float value) {
            addCriterion("interval_3 <>", value, "interval3");
            return (Criteria) this;
        }

        public Criteria andInterval3GreaterThan(Float value) {
            addCriterion("interval_3 >", value, "interval3");
            return (Criteria) this;
        }

        public Criteria andInterval3GreaterThanOrEqualTo(Float value) {
            addCriterion("interval_3 >=", value, "interval3");
            return (Criteria) this;
        }

        public Criteria andInterval3LessThan(Float value) {
            addCriterion("interval_3 <", value, "interval3");
            return (Criteria) this;
        }

        public Criteria andInterval3LessThanOrEqualTo(Float value) {
            addCriterion("interval_3 <=", value, "interval3");
            return (Criteria) this;
        }

        public Criteria andInterval3In(List<Float> values) {
            addCriterion("interval_3 in", values, "interval3");
            return (Criteria) this;
        }

        public Criteria andInterval3NotIn(List<Float> values) {
            addCriterion("interval_3 not in", values, "interval3");
            return (Criteria) this;
        }

        public Criteria andInterval3Between(Float value1, Float value2) {
            addCriterion("interval_3 between", value1, value2, "interval3");
            return (Criteria) this;
        }

        public Criteria andInterval3NotBetween(Float value1, Float value2) {
            addCriterion("interval_3 not between", value1, value2, "interval3");
            return (Criteria) this;
        }

        public Criteria andInterval4IsNull() {
            addCriterion("interval_4 is null");
            return (Criteria) this;
        }

        public Criteria andInterval4IsNotNull() {
            addCriterion("interval_4 is not null");
            return (Criteria) this;
        }

        public Criteria andInterval4EqualTo(Float value) {
            addCriterion("interval_4 =", value, "interval4");
            return (Criteria) this;
        }

        public Criteria andInterval4NotEqualTo(Float value) {
            addCriterion("interval_4 <>", value, "interval4");
            return (Criteria) this;
        }

        public Criteria andInterval4GreaterThan(Float value) {
            addCriterion("interval_4 >", value, "interval4");
            return (Criteria) this;
        }

        public Criteria andInterval4GreaterThanOrEqualTo(Float value) {
            addCriterion("interval_4 >=", value, "interval4");
            return (Criteria) this;
        }

        public Criteria andInterval4LessThan(Float value) {
            addCriterion("interval_4 <", value, "interval4");
            return (Criteria) this;
        }

        public Criteria andInterval4LessThanOrEqualTo(Float value) {
            addCriterion("interval_4 <=", value, "interval4");
            return (Criteria) this;
        }

        public Criteria andInterval4In(List<Float> values) {
            addCriterion("interval_4 in", values, "interval4");
            return (Criteria) this;
        }

        public Criteria andInterval4NotIn(List<Float> values) {
            addCriterion("interval_4 not in", values, "interval4");
            return (Criteria) this;
        }

        public Criteria andInterval4Between(Float value1, Float value2) {
            addCriterion("interval_4 between", value1, value2, "interval4");
            return (Criteria) this;
        }

        public Criteria andInterval4NotBetween(Float value1, Float value2) {
            addCriterion("interval_4 not between", value1, value2, "interval4");
            return (Criteria) this;
        }

        public Criteria andLocationIsNull() {
            addCriterion("location is null");
            return (Criteria) this;
        }

        public Criteria andLocationIsNotNull() {
            addCriterion("location is not null");
            return (Criteria) this;
        }

        public Criteria andLocationEqualTo(Float value) {
            addCriterion("location =", value, "location");
            return (Criteria) this;
        }

        public Criteria andLocationNotEqualTo(Float value) {
            addCriterion("location <>", value, "location");
            return (Criteria) this;
        }

        public Criteria andLocationGreaterThan(Float value) {
            addCriterion("location >", value, "location");
            return (Criteria) this;
        }

        public Criteria andLocationGreaterThanOrEqualTo(Float value) {
            addCriterion("location >=", value, "location");
            return (Criteria) this;
        }

        public Criteria andLocationLessThan(Float value) {
            addCriterion("location <", value, "location");
            return (Criteria) this;
        }

        public Criteria andLocationLessThanOrEqualTo(Float value) {
            addCriterion("location <=", value, "location");
            return (Criteria) this;
        }

        public Criteria andLocationIn(List<Float> values) {
            addCriterion("location in", values, "location");
            return (Criteria) this;
        }

        public Criteria andLocationNotIn(List<Float> values) {
            addCriterion("location not in", values, "location");
            return (Criteria) this;
        }

        public Criteria andLocationBetween(Float value1, Float value2) {
            addCriterion("location between", value1, value2, "location");
            return (Criteria) this;
        }

        public Criteria andLocationNotBetween(Float value1, Float value2) {
            addCriterion("location not between", value1, value2, "location");
            return (Criteria) this;
        }

        public Criteria andRange1IsNull() {
            addCriterion("range_1 is null");
            return (Criteria) this;
        }

        public Criteria andRange1IsNotNull() {
            addCriterion("range_1 is not null");
            return (Criteria) this;
        }

        public Criteria andRange1EqualTo(Float value) {
            addCriterion("range_1 =", value, "range1");
            return (Criteria) this;
        }

        public Criteria andRange1NotEqualTo(Float value) {
            addCriterion("range_1 <>", value, "range1");
            return (Criteria) this;
        }

        public Criteria andRange1GreaterThan(Float value) {
            addCriterion("range_1 >", value, "range1");
            return (Criteria) this;
        }

        public Criteria andRange1GreaterThanOrEqualTo(Float value) {
            addCriterion("range_1 >=", value, "range1");
            return (Criteria) this;
        }

        public Criteria andRange1LessThan(Float value) {
            addCriterion("range_1 <", value, "range1");
            return (Criteria) this;
        }

        public Criteria andRange1LessThanOrEqualTo(Float value) {
            addCriterion("range_1 <=", value, "range1");
            return (Criteria) this;
        }

        public Criteria andRange1In(List<Float> values) {
            addCriterion("range_1 in", values, "range1");
            return (Criteria) this;
        }

        public Criteria andRange1NotIn(List<Float> values) {
            addCriterion("range_1 not in", values, "range1");
            return (Criteria) this;
        }

        public Criteria andRange1Between(Float value1, Float value2) {
            addCriterion("range_1 between", value1, value2, "range1");
            return (Criteria) this;
        }

        public Criteria andRange1NotBetween(Float value1, Float value2) {
            addCriterion("range_1 not between", value1, value2, "range1");
            return (Criteria) this;
        }

        public Criteria andRange2IsNull() {
            addCriterion("range_2 is null");
            return (Criteria) this;
        }

        public Criteria andRange2IsNotNull() {
            addCriterion("range_2 is not null");
            return (Criteria) this;
        }

        public Criteria andRange2EqualTo(Float value) {
            addCriterion("range_2 =", value, "range2");
            return (Criteria) this;
        }

        public Criteria andRange2NotEqualTo(Float value) {
            addCriterion("range_2 <>", value, "range2");
            return (Criteria) this;
        }

        public Criteria andRange2GreaterThan(Float value) {
            addCriterion("range_2 >", value, "range2");
            return (Criteria) this;
        }

        public Criteria andRange2GreaterThanOrEqualTo(Float value) {
            addCriterion("range_2 >=", value, "range2");
            return (Criteria) this;
        }

        public Criteria andRange2LessThan(Float value) {
            addCriterion("range_2 <", value, "range2");
            return (Criteria) this;
        }

        public Criteria andRange2LessThanOrEqualTo(Float value) {
            addCriterion("range_2 <=", value, "range2");
            return (Criteria) this;
        }

        public Criteria andRange2In(List<Float> values) {
            addCriterion("range_2 in", values, "range2");
            return (Criteria) this;
        }

        public Criteria andRange2NotIn(List<Float> values) {
            addCriterion("range_2 not in", values, "range2");
            return (Criteria) this;
        }

        public Criteria andRange2Between(Float value1, Float value2) {
            addCriterion("range_2 between", value1, value2, "range2");
            return (Criteria) this;
        }

        public Criteria andRange2NotBetween(Float value1, Float value2) {
            addCriterion("range_2 not between", value1, value2, "range2");
            return (Criteria) this;
        }

        public Criteria andRange3IsNull() {
            addCriterion("range_3 is null");
            return (Criteria) this;
        }

        public Criteria andRange3IsNotNull() {
            addCriterion("range_3 is not null");
            return (Criteria) this;
        }

        public Criteria andRange3EqualTo(Float value) {
            addCriterion("range_3 =", value, "range3");
            return (Criteria) this;
        }

        public Criteria andRange3NotEqualTo(Float value) {
            addCriterion("range_3 <>", value, "range3");
            return (Criteria) this;
        }

        public Criteria andRange3GreaterThan(Float value) {
            addCriterion("range_3 >", value, "range3");
            return (Criteria) this;
        }

        public Criteria andRange3GreaterThanOrEqualTo(Float value) {
            addCriterion("range_3 >=", value, "range3");
            return (Criteria) this;
        }

        public Criteria andRange3LessThan(Float value) {
            addCriterion("range_3 <", value, "range3");
            return (Criteria) this;
        }

        public Criteria andRange3LessThanOrEqualTo(Float value) {
            addCriterion("range_3 <=", value, "range3");
            return (Criteria) this;
        }

        public Criteria andRange3In(List<Float> values) {
            addCriterion("range_3 in", values, "range3");
            return (Criteria) this;
        }

        public Criteria andRange3NotIn(List<Float> values) {
            addCriterion("range_3 not in", values, "range3");
            return (Criteria) this;
        }

        public Criteria andRange3Between(Float value1, Float value2) {
            addCriterion("range_3 between", value1, value2, "range3");
            return (Criteria) this;
        }

        public Criteria andRange3NotBetween(Float value1, Float value2) {
            addCriterion("range_3 not between", value1, value2, "range3");
            return (Criteria) this;
        }

        public Criteria andRange4IsNull() {
            addCriterion("range_4 is null");
            return (Criteria) this;
        }

        public Criteria andRange4IsNotNull() {
            addCriterion("range_4 is not null");
            return (Criteria) this;
        }

        public Criteria andRange4EqualTo(Float value) {
            addCriterion("range_4 =", value, "range4");
            return (Criteria) this;
        }

        public Criteria andRange4NotEqualTo(Float value) {
            addCriterion("range_4 <>", value, "range4");
            return (Criteria) this;
        }

        public Criteria andRange4GreaterThan(Float value) {
            addCriterion("range_4 >", value, "range4");
            return (Criteria) this;
        }

        public Criteria andRange4GreaterThanOrEqualTo(Float value) {
            addCriterion("range_4 >=", value, "range4");
            return (Criteria) this;
        }

        public Criteria andRange4LessThan(Float value) {
            addCriterion("range_4 <", value, "range4");
            return (Criteria) this;
        }

        public Criteria andRange4LessThanOrEqualTo(Float value) {
            addCriterion("range_4 <=", value, "range4");
            return (Criteria) this;
        }

        public Criteria andRange4In(List<Float> values) {
            addCriterion("range_4 in", values, "range4");
            return (Criteria) this;
        }

        public Criteria andRange4NotIn(List<Float> values) {
            addCriterion("range_4 not in", values, "range4");
            return (Criteria) this;
        }

        public Criteria andRange4Between(Float value1, Float value2) {
            addCriterion("range_4 between", value1, value2, "range4");
            return (Criteria) this;
        }

        public Criteria andRange4NotBetween(Float value1, Float value2) {
            addCriterion("range_4 not between", value1, value2, "range4");
            return (Criteria) this;
        }

        public Criteria andLastTradeTimeIsNull() {
            addCriterion("last_trade_time is null");
            return (Criteria) this;
        }

        public Criteria andLastTradeTimeIsNotNull() {
            addCriterion("last_trade_time is not null");
            return (Criteria) this;
        }

        public Criteria andLastTradeTimeEqualTo(Date value) {
            addCriterionForJDBCDate("last_trade_time =", value, "lastTradeTime");
            return (Criteria) this;
        }

        public Criteria andLastTradeTimeNotEqualTo(Date value) {
            addCriterionForJDBCDate("last_trade_time <>", value, "lastTradeTime");
            return (Criteria) this;
        }

        public Criteria andLastTradeTimeGreaterThan(Date value) {
            addCriterionForJDBCDate("last_trade_time >", value, "lastTradeTime");
            return (Criteria) this;
        }

        public Criteria andLastTradeTimeGreaterThanOrEqualTo(Date value) {
            addCriterionForJDBCDate("last_trade_time >=", value, "lastTradeTime");
            return (Criteria) this;
        }

        public Criteria andLastTradeTimeLessThan(Date value) {
            addCriterionForJDBCDate("last_trade_time <", value, "lastTradeTime");
            return (Criteria) this;
        }

        public Criteria andLastTradeTimeLessThanOrEqualTo(Date value) {
            addCriterionForJDBCDate("last_trade_time <=", value, "lastTradeTime");
            return (Criteria) this;
        }

        public Criteria andLastTradeTimeIn(List<Date> values) {
            addCriterionForJDBCDate("last_trade_time in", values, "lastTradeTime");
            return (Criteria) this;
        }

        public Criteria andLastTradeTimeNotIn(List<Date> values) {
            addCriterionForJDBCDate("last_trade_time not in", values, "lastTradeTime");
            return (Criteria) this;
        }

        public Criteria andLastTradeTimeBetween(Date value1, Date value2) {
            addCriterionForJDBCDate("last_trade_time between", value1, value2, "lastTradeTime");
            return (Criteria) this;
        }

        public Criteria andLastTradeTimeNotBetween(Date value1, Date value2) {
            addCriterionForJDBCDate("last_trade_time not between", value1, value2, "lastTradeTime");
            return (Criteria) this;
        }
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table behavior_certificate_table
     *
     * @mbggenerated do_not_delete_during_merge
     */
    public static class Criteria extends GeneratedCriteria {

        protected Criteria() {
            super();
        }
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table behavior_certificate_table
     *
     * @mbggenerated
     */
    public static class Criterion {
        private String condition;

        private Object value;

        private Object secondValue;

        private boolean noValue;

        private boolean singleValue;

        private boolean betweenValue;

        private boolean listValue;

        public String getCondition() {
            return condition;
        }

        public Object getValue() {
            return value;
        }

        public Object getSecondValue() {
            return secondValue;
        }

        public boolean isNoValue() {
            return noValue;
        }

        public boolean isSingleValue() {
            return singleValue;
        }

        public boolean isBetweenValue() {
            return betweenValue;
        }

        public boolean isListValue() {
            return listValue;
        }

        protected Criterion(String condition) {
            super();
            this.condition = condition;
            this.noValue = true;
        }

        protected Criterion(String condition, Object value) {
            super();
            this.condition = condition;
            this.value = value;
            if (value instanceof List<?>) {
                this.listValue = true;
            } else {
                this.singleValue = true;
            }
        }

        protected Criterion(String condition, Object value, Object secondValue) {
            super();
            this.condition = condition;
            this.value = value;
            this.secondValue = secondValue;
            this.betweenValue = true;
        }
    }
}